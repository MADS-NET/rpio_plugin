/*
  ____                                   _             _
 / ___|  ___  _   _ _ __ ___ ___   _ __ | |_   _  __ _(_)_ __
 \___ \ / _ \| | | | '__/ __/ _ \ | '_ \| | | | |/ _` | | '_ \
  ___) | (_) | |_| | | | (_|  __/ | |_) | | |_| | (_| | | | | |
 |____/ \___/ \__,_|_|  \___\___| | .__/|_|\__,_|\__, |_|_| |_|
                                  |_|            |___/
# A Template for RpioPlugin, a Source Plugin
# Generated by the command: plugin -t source rpio -d rpio_plugin -o
# Hostname: Fram-IV.local
# Current working directory: /Users/p4010/Develop/MADS_plugins
# Creation date: 2025-08-26T13:24:48.218+0200
# NOTICE: MADS Version 1.3.3
*/
// Mandatory included headers
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
#include <source.hpp>
// other includes as needed here
#include <gpiod.hpp>
#include <sstream>

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "rpio_in"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;

// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class RpioPlugin : public Source<json> {
  
  void setup_lines() {
    _chip = gpiod::chip(_chip_path);
    _lines = _chip.get_lines(_offsets);
    gpiod::line_request req;
    req.consumer = "rpio_in.plugin";
    req.request_type = gpiod::line_request::DIRECTION_INPUT;
    if (_params.value("pulldown", true)) {
      req.flags = ::gpiod::line_request::FLAG_BIAS_PULL_DOWN;
    } else {
      req.flags = ::gpiod::line_request::FLAG_BIAS_PULL_UP;
    }
    _lines.request(req);
  }
  
  public:
    ~RpioPlugin() {
      _lines.release();
      _chip.reset(); // Destructor, release resources if needed
    }

  // Typically, no need to change this
  string kind() override { return PLUGIN_NAME; }

  // Implement the actual functionality here
  return_type get_output(json &out,
                         std::vector<unsigned char> *blob = nullptr) override {
    out.clear();
    int value = 0;
    unsigned int offset = 0;
    for (auto &line : _lines) {
      try {
        value = line.get_value();
        offset = line.offset();
        out[_chip_path][to_string(offset)] = value;
      } catch (const std::exception &e) {
        _error = e.what();
        return return_type::error;
      }
    }

    // This sets the agent_id field in the output json object, only when it is
    // not empty
    if (!_agent_id.empty())
      out["agent_id"] = _agent_id;
    return return_type::success;
  }

  void set_params(void const *params) override {
    Source::set_params(params);
    _params["chip_path"] = "/dev/gpiochip0";
    _params["pulldown"] = true;
    _params.merge_patch(*(json *)params);

    try {
      _chip_path = _params["chip_path"];
    } catch (nlohmann::json::exception &e) {
      _chip_path = "/dev/gpiochip0";
    }
    try {
      _offsets = _params["offsets"].get<vector<unsigned int>>();
    } catch (nlohmann::json::exception &e) {
      _offsets = {};
    }

    setup_lines();
  }

  // Implement this method if you want to provide additional information
  map<string, string> info() override {
    map<string, string> info;
    ostringstream ss;
    info["chip_path"] = _chip_path;
    info["pulldown"] = _params.value("pulldown", true) ? "true" : "false";

    for (size_t i = 0; i < _offsets.size(); i++) {
      ss << _offsets[i];
      if (i < _offsets.size() - 1)
        ss << ", ";
    }
    info["offsets"] = ss.str();
    return info;
  };

private:
  // Define the fields that are used to store internal resources
  string _chip_path;
  vector<unsigned int> _offsets;
  gpiod::chip _chip;
  gpiod::line_bulk _lines;
};

/*
  ____  _             _             _      _
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|
                |___/
Enable the class as plugin
*/
INSTALL_SOURCE_DRIVER(RpioPlugin, json)

/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/
int main(int argc, char const *argv[]) {
  RpioPlugin plugin;
  json output, params;

  // Set example values to params
  params["offsets"] = {5, 10, 12, 15};

  // Set the parameters
  plugin.set_params(&params);

  for (auto const &p : plugin.info()) {
    cout << p.first << ": " << p.second << endl;
  }

  // Process data
  plugin.get_output(output);

  // Produce output
  cout << "Output: " << output << endl;

  return 0;
}
